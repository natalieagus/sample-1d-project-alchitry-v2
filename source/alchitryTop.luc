module alchitryTop (
    input clk,              // 100MHz clock
    input rstN,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usbRx,            // USB->Serial input
    output usbTx,           // USB->Serial output
    output ioLed[3][8],     // LEDs on IO Shield
    output ioSeg[8],        // 7-segment LEDs on IO Shield
    output ioSel[4],        // Digit select on IO Shield
    input ioButton[5],      // 5 buttons on IO Shield
    input ioDip[3][8]       // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    const CLK_FREQ = $isSim() ? 1000 : 10000000 // put 1000 for sim, 10M for hardware 
    const SEVEN_SEG_DIV = $isSim() ? 3 : 16 // put 3 for sim, 16 for hardware
    const SLOW_CLOCK_DIV = $isSim() ? 9 : 26 // put 9 for sim, 26 for hardware 
    const FAST_CLOCK_DIV = $isSim() ? 7 : 21 // put 7 for sim, 21 for hardware 
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        resetConditioner resetCond
        edgeDetector edge_dt_btn_p1 (#RISE(1), #FALL(0))
        edgeDetector edge_dt_btn_p2(#RISE(1), #FALL(0))
        
        buttonConditioner btn_cond_p1(#CLK_FREQ(CLK_FREQ))
        buttonConditioner btn_cond_p2(#CLK_FREQ(CLK_FREQ)) 
        
        
        .rst(rst){
            multiSevenSeg seg(#DIV(SEVEN_SEG_DIV))
            gameMiniBeta gameMachine(#SLOW_CLOCK_DIV(SLOW_CLOCK_DIV), #FAST_CLOCK_DIV(FAST_CLOCK_DIV))
        }
        
    }
    
   
    binToDec binToDecConverter(#DIGITS(4))
    
    always {
        resetCond.in = ~rstN // input raw inverted reset signal
        rst = resetCond.out   // conditioned reset
        
        usbTx = usbRx        // loop serial port
        
        led = 8h00             // turn LEDs off
        
        ioLed = 3x{{8h00}}    // turn LEDs off
        ioSeg = 8hff          // turn segments off
        ioSel = 4hf           // select no digits
        
        btn_cond_p1.in = ioButton[4] //to reduce the bouncing effects of your button 
        btn_cond_p2.in = ioButton[3]
        edge_dt_btn_p1.in = btn_cond_p1.out //get the edge of button press
        edge_dt_btn_p2.in = btn_cond_p2.out
        
        gameMachine.p1_button = edge_dt_btn_p1.out
        gameMachine.p2_button = edge_dt_btn_p2.out
        
        //update 7segments
        seg.values = 4x{{4b0}} // default to all 0 first
        binToDecConverter.value = gameMachine.current_counter_out
        seg.values = binToDecConverter.digits

        //show the counter value at led 
        if(ioButton[0]){
            ioLed[2] = binToDecConverter.digits[0]
        }
        else{
            ioLed[2] = gameMachine.current_counter_out // show current counter value (to match with 7seg) 
            
        }
        ioLed[0] = gameMachine.p1_out    // p1 score 
        ioLed[1] = gameMachine.p2_out    // p2 score
        led[0] = gameMachine.debug_slowclock
        led[1] = gameMachine.debug_vcclock
        led[7:2] = gameMachine.timer_out 
        
        ioSeg = ~seg.seg
        ioSel = ~seg.sel
        
    }
}