module gameMiniBeta #(
    SLOW_CLOCK_DIV ~ 26 : SLOW_CLOCK_DIV > 0,
    FAST_CLOCK_DIV ~ 21 : FAST_CLOCK_DIV > 0
)(
    input p1_button,
    input p2_button,
    
    input clk,  // clock
    input rst,  // reset
    
    
    output p1_out[16],
    output p2_out[16],
    output current_counter_out[16],
    output timer_out[16],
    output debug_slowclock,
    output debug_vcclock,
    
    output decimal_counter_increase,
    output decimal_counter_rst
) {
    
    //temp variables
    sig inputAlu_a[16]
    sig inputAlu_b[16]
    
    alu game_alu
    
    .clk(clk){
        edgeDetector edge_detector_variableCounter (#RISE(1), #FALL(0))
        edgeDetector game_timer_detector(#RISE(1), #FALL(0))
        
        .rst(rst){
            gameCU game_controlunit
            gameMiniRegfiles players
            
            variableCounter vc(#SLOW_CLOCK_DIV(SLOW_CLOCK_DIV), #FAST_CLOCK_DIV(FAST_CLOCK_DIV))
            counter gameTimer(#SIZE(1),#DIV(SLOW_CLOCK_DIV)) 
            
        }
    }
    always {
        
        //edge detectors
        game_timer_detector.in = gameTimer.value // 30 second timer detector
        edge_detector_variableCounter.in = vc.out // random counter increase signal 
        
        //pass timer and counter signals to CU unit 
        game_controlunit.increase_counter = edge_detector_variableCounter.out
        game_controlunit.decrease_timer = game_timer_detector.out
        
        //pass button press signal to CU unit
        game_controlunit.p1_button = p1_button
        game_controlunit.p2_button = p2_button
        
        //output of CU to increase 7segment
        decimal_counter_increase = game_controlunit.decimal_counter_increase
        decimal_counter_rst = game_controlunit.decimal_counter_rst
        
        //Setup REGFILE unit 
        players.we = game_controlunit.we_regfile
        players.write_address = game_controlunit.regfile_write_address
        
        players.read_address_a = game_controlunit.regfile_read_address_a
        players.read_address_b = game_controlunit.regfile_read_address_b
        
        //bootstrap reg_b output to CU for convenient branching conditions
        game_controlunit.regfile_datain = players.out_b
        
        //asel mux
        case(game_controlunit.asel){
            b00  : inputAlu_a = players.out_a
            b01  : inputAlu_a = 1 
            b11  : inputAlu_a = 30
            default : //b10 unused
                inputAlu_a = 0
        }
        
        //bsel mux
        case(game_controlunit.bsel){
            b00 : inputAlu_b = players.out_b
            b01 : inputAlu_b = 1
            b11 : inputAlu_b = 3
            b10 : inputAlu_b = 0
            default: //necessary to init
                inputAlu_b = 0
            
        }
        
        //ALU
        game_alu.a = inputAlu_a
        game_alu.b = inputAlu_b
        game_alu.alufn_signal = game_controlunit.alufn
        
        
        //wdsel mux
        case (game_controlunit.alu_out_sel){
            b01 : players.data = b1111111111111111
            b10 : players.data = b0000000000001111
            b11 : players.data = 0
            default : //b00
                players.data = game_alu.out
        }
        
        current_counter_out = players.counter_out
        
        //for debugging
        timer_out = players.timer
        p1_out = players.all_scores[15:0]
        p2_out = players.all_scores[31:16]
        debug_slowclock = gameTimer.value
        debug_vcclock = vc.out
        
    }
}